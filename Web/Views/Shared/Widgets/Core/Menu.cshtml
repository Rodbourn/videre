@using System.Linq;
@using System.Collections.Generic;
@using Models = Videre.Core.Models;
@using Videre.Core.Extensions;

@model Models.Widget
@functions{
    private string GetUrl(string url)
    {
        return !string.IsNullOrEmpty(url) ? Url.Content(url) : "";
    }
    
}
    
@{
var searchUrl = Videre.Core.Services.Portal.CurrentPortal.GetAttribute("Core", "SearchUrl", "~/search");

Models.Menu menu = Model.GetContent<Models.Menu>();
if (menu != null)
{
    
    if (menu.ShowSearch)
    {
        Html.RegisterControlPresenter(Model, "videre.widgets.search");
    }
    
  <div id="@Model.GetId("Widget")" class="navbar @menu.Css @Model.Css" style="@Model.Style">
    <div class="navbar-inner">
      <div class="container" >
        <a class="brand" href="@Url.Content("~/")">@menu.Text</a>

        <div class="nav-collapse">
          <ul class="nav">
            @{
             foreach (var item in menu.Items.Where(i => i.IsAuthorized))
             {
                 var css = "";  //active???
                 if (item.Items.Count == 0)
                 {
                     <li><a href="@GetUrl(item.Url)">@item.Text</a></li>
                 }
                 else
                 {
                    <li class="dropdown">
                        <a href="@GetUrl(item.Url)" class="dropdown-toggle" data-toggle="dropdown">@item.Text <b class="caret"></b></a>
                        <ul class="dropdown-menu">
                             @{
                     //yes, I know, we should use recursion, but menu currently only supports 2 levels
                             foreach (var subItem in item.Items.Where(i => i.IsAuthorized))   
                             {
                             <li><a href="@GetUrl(subItem.Url)">@subItem.Text</a></li>
                             }}
                        </ul>
                    </li>
                 }  
              }
             }
          </ul>
@{          
        if (menu.ShowSearch)
        {
          <form class="navbar-search pull-right" action="@Url.Content(searchUrl)" method="get">
            <input type="text" name="q" id="@Model.GetId("Term")" class="search-query span2" placeholder="Search" autocomplete="off">
          </form>
        }
}
        </div>
      </div>
    </div>
  </div>
}
}
