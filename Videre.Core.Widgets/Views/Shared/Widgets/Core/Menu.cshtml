@using System.Linq;
@using System.Collections.Generic;
@using Models = Videre.Core.Models;
@using Videre.Core.Extensions;
@using Videre.Core.Services;

@model Models.Widget
@functions{
    private string GetUrl(string url)
    {
        return !string.IsNullOrEmpty(url) ? Url.Content(url) : "";
    }
    
}
    
@{
var canEdit = Security.IsActivityAuthorized("Content", "Administration");

var searchUrl = Videre.Core.Services.Portal.CurrentPortal.GetAttribute("Core", "SearchUrl", "~/search");
var showSearch = Model.GetAttribute("ShowSearch", "No") == "Yes";
var inverseColors = Model.GetAttribute("InverseColors", "No") == "Yes";
var alwaysOnTop = Model.GetAttribute("AlwaysOnTop", "Yes") == "Yes";
var showLogo = Model.GetAttribute("ShowLogo", "No") == "Yes";

Models.Menu menu = Model.GetContent<Models.Menu>();
if (menu != null)
{
    
    if (showSearch)
    {
        Html.RegisterControlPresenter(Model, "videre.widgets.search");
    }
    
    if (canEdit)
    {
        Html.RenderPartial("Controls/Core/WidgetAdminContextMenu", Model);
    }
  <div id="@Model.GetId("Widget")" class="navbar @(inverseColors ? "navbar-inverse" : "") @(alwaysOnTop ? "navbar-fixed-top" : "") @Model.Css" style="@Model.Style">

    <div class="navbar-inner">
      <div class="container" >
          @if (!string.IsNullOrEmpty(menu.Text) || showLogo)
          {
        <a class="brand" href="@Url.Content("~/")">
            @menu.Text
            @if (showLogo && !string.IsNullOrEmpty(Portal.CurrentPortal.LogoUrl))
            {
                <img src="@Portal.CurrentPortal.LogoUrl" />
            }
        </a>
          }
        <div class="nav-collapse">
          <ul class="nav">
              @menuTemplate(menu.Items, 0)
            @helper menuTemplate(List<Models.MenuItem> items, int depth) 
            {
             foreach (var item in items.Where(i => i.IsAuthorized))
             {
                 var css = "";  //active???
                 if (item.Items.Count == 0)
                 {
                     <li><a href="@GetUrl(item.Url)">@item.Text</a></li>
                 }
                 else
                 {
                    <li class="@(depth == 0 ? "dropdown" : "dropdown-submenu")">
                        <a href="@GetUrl(item.Url)" class="dropdown-toggle" data-toggle="dropdown">@item.Text @Html.Raw(depth == 0 ? "<i class=\"caret\"></i>" : "")</a>
                        <ul class="dropdown-menu">
                            @menuTemplate(item.Items, depth + 1)
                        </ul>
                    </li>
                 }  
              }
             }
          </ul>
@{          
        if (showSearch)
        {
          <form class="navbar-search pull-right" action="@Url.Content(searchUrl)" method="get">
            <input type="text" name="q" id="@Model.GetId("Term")" class="search-query span2" placeholder="Search" autocomplete="off">
          </form>
        }       
}
        </div>
      </div>
    </div>
  </div>
}
}
