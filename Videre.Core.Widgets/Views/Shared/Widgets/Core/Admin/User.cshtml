@using System.Collections.Generic;
@using Videre.Core.Extensions;
@using Models = Videre.Core.Models;
@using System.Web.Mvc.Html;
@using Videre.Core.Services;
@using Plugin = Videre.Core.Extensions.Bootstrap.Controls.BootstrapDropDownListModel.Plugin;
@using Bootstrap = Videre.Core.Extensions.Bootstrap;
@model Models.Widget

@{
    Html.RegisterWebReferenceGroup("datatables");

    Html.RegisterControlPresenter(Model, "videre.widgets.admin.user", new Dictionary<string, object>() { 
        { "data", Videre.Core.Services.Account.GetUsers() }, 
        { "customElements", Videre.Core.Services.Account.CustomUserElements}
    });
}

<div id="@Model.GetId("Widget")">
    @{Html.RenderPartial("WidgetHeader", Model);}

    @{Html.RenderPartial("WidgetSectionHeader", Model, new ViewDataDictionary(new { SectionHeader = Model.GetText("WidgetTitle.Text", "User Administration") }));}

    <p>@Html.Raw(Model.GetText("Instructions.Text", "User administration can be performed here.  This widget is intended for use by admins only."))</p>

    <div class="row">
        <div class="btn-toolbar col-md-12">
            <div class="btn-group">
                @if (Authentication.PersistenceProvider != null)
                {
                @Html.Bootstrap().Button("btnNew").ButtonSize(BootstrapUnits.ButtonSize.Small).Text("NewEntry.Text", "New Entry", true).Icon("glyphicon glyphicon-plus")
                }
            </div>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped table-bordered table-condensed" id="@Model.GetId("ItemTable")">
                <thead>
                    <tr>
                        <th></th>
                        <th>@Model.GetText("Name.Text", "Name")</th>
                        <th>@Model.GetText("Email.Text", "Email")</th>
                        <th>@Model.GetText("Locale.Text", "Locale")</th>
                    </tr>
                </thead>
                <tbody id="@Model.GetId("ItemList")"></tbody>
            </table>
            <script id="@Model.GetId("ItemListTemplate")" type="text/html">
                <tr>
                    <td>
                        <div class="btn-group">
                        @Html.Bootstrap().Button().DataAttribute("id", "{{:Id}}").DataAttribute("action", "edit").Icon("glyphicon glyphicon-pencil").ButtonSize(BootstrapUnits.ButtonSize.ExtraSmall)
                        @Html.Bootstrap().Button().DataAttribute("id", "{{:Id}}").DataAttribute("action", "delete").Icon("glyphicon glyphicon-trash").ButtonSize(BootstrapUnits.ButtonSize.ExtraSmall)
                        </div>
                    </td>
                    <td>{{:Name}}</td>
                    <td>{{:Email}}</td>
                    <td>{{:Locale}}</td>
                </tr>
            </script>
        </div>
    </div>

    <div id="@Model.GetId("Dialog")" data-target="#@Model.GetId("Dialog")" class="modal fade" >
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    @Model.GetText("EditDialogText.Text", "Edit User")
                </div>
                <div class="modal-body">
                    @{Html.RenderPartial("WidgetHeader", Model);}

                    @{
                    var tabs = new List<Bootstrap.Controls.BootstrapTab>() {  new Bootstrap.Controls.BootstrapTab() { Id = @Model.GetId("GeneralTab"), Text = @Model.GetText("General.Text", "General"), Active = true} };
                    if (Account.CustomUserElements.Count > 0) { tabs.Add(new Bootstrap.Controls.BootstrapTab() { Id = @Model.GetId("CustomTab"), Text = @Model.GetText("Custom.Text", "Custom") }); }
                    }
                    @Html.Bootstrap().Tabs(tabs)
                    <div class="tab-content">
                        <div class="tab-pane active form-horizontal" id="@Model.GetId("GeneralTab")">
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Name.Text", "Name").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().TextBox().DataColumn("Name").Required(), BootstrapUnits.GridSize.MediumDevice8)
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Email.Text", "Email").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().Email().DataColumn("Email").Required(), BootstrapUnits.GridSize.MediumDevice8)
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Locale.Text", "Locale").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().TextBox().DataColumn("Locale"), BootstrapUnits.GridSize.MediumDevice3)
                            @if (Authentication.PersistenceProvider != null)
                            {
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Password.Text", "Password").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().Password("txtPassword").DataColumn("Password").DisableAutoComplete(), BootstrapUnits.GridSize.MediumDevice8)
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("ConfirmPassword.Text", "Confirm Password").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().Password("txtPassword2").DataColumn("Password").MustMatch("txtPassword").DisableAutoComplete(), BootstrapUnits.GridSize.MediumDevice8)
                            }
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Roles.Text", "Roles").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().RoleList().Plugin(Plugin.BootstrapSelect).Multiple().DataColumn("RoleIds"), BootstrapUnits.GridSize.MediumDevice8)
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("TimeZone.Text", "Time Zone").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().DropDownList().DataColumn("TimeZone").Options(TimeZoneInfo.GetSystemTimeZones().Select(t => new SelectListItem() { Value = t.StandardName, Text = t.DisplayName }).ToList()), BootstrapUnits.GridSize.MediumDevice8)
                        </div>
                        @{
                            if (Account.CustomUserElements.Count > 0)
                            {
                            <div class="tab-pane form-horizontal" id="@Model.GetId("CustomTab")">
                                @foreach (var element in Account.CustomUserElements)
                                {
                                    if (element.Values != null)
                                    {
                                        @Html.Bootstrap().FormGroup(Html.Bootstrap().Label(element.SafeName + ".Text", element.Name).GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().DropDownList().Options(element.Values).DataColumn(element.Name).Required(element.Required), BootstrapUnits.GridSize.MediumDevice8)
                                    }
                                    else
                                    {
                                        if (element.DataType == typeof(bool))
                                        {
                                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label(element.SafeName + ".Text", element.Name).GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().CheckBox().DataColumn(element.Name).Required(element.Required).Checked(element.DefaultValue == "true"), BootstrapUnits.GridSize.MediumDevice8)
                                        }
                                        else 
                                        {
                                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label(element.SafeName + ".Text", element.Name).GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().TextBox().DataColumn(element.Name).Required(element.Required), BootstrapUnits.GridSize.MediumDevice8)
                                        }
                                    }
                                }
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    @if (Videre.Core.Services.Security.IsActivityAuthorized("Account", "Administration") && Account.AccountVerificationMode != "None")
                    {
                    @Html.Bootstrap().Button("btnVerify").ButtonStyle(BootstrapUnits.ButtonStyle.Default).Text("Verify.Text", "Verify").StyleAttribute("display", "none")
                    }
                    @Html.Bootstrap().Button("btnSave").ButtonStyle(BootstrapUnits.ButtonStyle.Primary).Text("Save.Text", "Save", true)
                    @Html.Bootstrap().Button().Text("Cancel.Text", "Cancel", true).DataAttribute("dismiss", "modal")
                </div>
            </div>
        </div>
    </div>


</div>

