@using System.Collections.Generic;
@using Videre.Core.Extensions;
@using Models = Videre.Core.Models;
@using System.Web.Mvc.Html;
@using Videre.Core.Services;
@using Bootstrap = Videre.Core.Extensions.Bootstrap;
@model Models.Widget

@{
    Html.RegisterWebReferenceGroup("datatables");
    Html.RegisterWebReferenceGroup("fileuploader");
    //Html.RegisterScript("~/scripts/fileuploader.js", true);
    //var portal = Videre.Core.Services.Portal.CurrentPortal;
    var currentPortalId = Portal.CurrentPortalId;
    var portals = Portal.GetPortals();
    Html.RegisterControlPresenter(Model, "videre.widgets.admin.portal", new Dictionary<string, object>() {
        { "portals", portals }, 
        { "selectedPortalId", currentPortalId }, 
        { "installedThemes", UI.GetThemes() }, 
        { "themeAPIUrl", UI.ThemeAPIUrl},
        { "attributeDefs", Portal.AttributeDefinitions }}
        );
}

<div id="@Model.GetId("Widget")">
    @{Html.RenderPartial("WidgetHeader", Model);}
    @{Html.RenderPartial("WidgetSectionHeader", Model, new ViewDataDictionary(new { SectionHeader = Model.GetText("WidgetTitle.Text", "Portal Administration") }));}


    <p>@Html.Raw(Model.GetText("Instructions.Text", "Settings specific to the current portal can be configured here."))</p>

    <div class="container">
        <div class="row">
            <div class="btn-toolbar col-md-4">
                <div class="btn-group">
                    @Html.Bootstrap().DropDownList("ddlPortals").InputSize(BootstrapUnits.InputSize.Small).Css("form-control").Append(Html.Bootstrap().Button("btnNew").ButtonSize(BootstrapUnits.ButtonSize.Small).Text("NewPortal.Text", "New Portal", true).Icon("glyphicon glyphicon-plus"))
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-12">
                @{
                var tabs = new List<Bootstrap.Controls.BootstrapTab>() 
                { 
                    new Bootstrap.Controls.BootstrapTab() { Id = @Model.GetId("GeneralTab"), Text = @Model.GetText("General.Text", "General"), Active = true, Icon = "glyphicon glyphicon-list-alt" },
                    new Bootstrap.Controls.BootstrapTab() { Id = @Model.GetId("ServerEnvironmentTab"), Text = @Model.GetText("ServerEnvironment.Text", "Server Environment"), Icon = "glyphicon glyphicon-hdd" },
                    new Bootstrap.Controls.BootstrapTab() { Id = @Model.GetId("ThemeTab"), Text = @Model.GetText("Themes.Text", "Themes"), Icon = "glyphicon glyphicon-picture" }
                };
                foreach (var groupName in Portal.AttributeDefinitions.Keys.OrderBy(s => s))
                {
                    var safeGroupName = groupName.Replace(" ", "-").Replace(".", "-");
                    tabs.Add(new Bootstrap.Controls.BootstrapTab() { Id = Model.GetId("tab" + safeGroupName), Text = groupName, Icon = "glyphicon glyphicon-list-alt"});
                }
                }
                @Html.Bootstrap().Tabs(tabs)

                <div class="tab-content" style="min-height: 400px;">
                    <div class="tab-pane active" id="@Model.GetId("GeneralTab")">
                        <div class="form-horizontal col-md-6">
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Name.Text", "Name").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().TextBox().DataColumn("Name").Required(), BootstrapUnits.GridSize.MediumDevice8)
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Title.Text", "Title").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().TextBox().DataColumn("Title"), BootstrapUnits.GridSize.MediumDevice8)
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("LogoUrl.Text", "Logo Url").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().FileBrowser().DataColumn("LogoUrl"), BootstrapUnits.GridSize.MediumDevice8)
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Aliases.Text", "Aliases").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().TagsInput().DataColumn("Aliases"), BootstrapUnits.GridSize.MediumDevice8)
                            @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Default.Text", "Default").GridSize(BootstrapUnits.GridSize.MediumDevice4), Html.Bootstrap().CheckBox().DataColumn("Default"), BootstrapUnits.GridSize.MediumDevice2)
                        </div>
                    </div>
                    <div class="tab-pane" id="@Model.GetId("ServerEnvironmentTab")">
                        @{ Html.RenderPartial("Widgets/Core/Admin/ServerEnvironment"); }
                    </div>

                    <div class="tab-pane" id="@Model.GetId("ThemeTab")">
                        @{Html.RenderPartial("Widgets/Core/Admin/Theme", Model);}
                    </div>
                    @{
                        foreach (var groupName in Portal.AttributeDefinitions.Keys)
                        {
                            var safeGroupName = groupName.Replace(" ", "-").Replace(".", "-");
                        <div class="tab-pane" id="@Model.GetId("tab" + safeGroupName)">
                            <div class="form-horizontal col-md-6" id="@Model.GetId("AttributeList-" + safeGroupName)" data-group="@groupName"></div>
                        </div>
                        }
                    }
                    <script id="@Model.GetId("AttributeListTemplate")" type="text/html">
                        <div class="form-group">
                            <label class="control-label col-md-3">{{:LabelText}}</label>
                            <div class="col-md-9" data-type="input">
                                {{:~bindInputs(#data, ~attributes, '$' + ~groupName + '.' + #data.Name)}}
                            </div>
                        </div>
                    </script>

                </div>
                <div class="videre-form-actions">
                    @Html.Bootstrap().Button("btnSave").ButtonStyle(BootstrapUnits.ButtonStyle.Primary).Text("Save.Text", "Save", true)
                </div>
            </div>
        </div>
    </div>

    <div id="@Model.GetId("CreatePortalDialog")" data-target="#@Model.GetId("CreatePortalDialog")" class="modal fade">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            @Model.GetText("NewPortal.Text", "New Portal")
        </div>
        <div class="modal-body">
            @{Html.RenderPartial("WidgetHeader", Model);}
            <div class="form-horizontal">

                <div>
                    <h5>@Model.GetText("Portal.Text", "Portal")</h5>
                    <div class="control-group">
                        <label class="control-label" for="optionsCheckboxList">Packages</label>
                        <div class="controls" id="@Model.GetId("Packages")">
                            @foreach (var package in Videre.Core.Services.Package.GetAvailablePackages().Where(p => p.Type == "Data"))
                            {
                                <label class="checkbox" title="@package.Description">
                                    <input type="checkbox" value="@package.Name" checked="checked">
                                    @package.Name
                                </label>
                            }
                        </div>
                    </div>

                    @Html.InputControlGroup(Model, "txtName", "Name.Text", "Name", "Name")
                </div>
                <div id="@Model.GetId("AdminUser")">
                    <h5>@Model.GetText("AdminUser.Text", "Admin User")</h5>

                    @Html.InputControlGroup(Model, "txtUserName", "UserName.Text", "UserName", new Dictionary<string, string>() { { "column", "Name" } }, true)
                    @Html.InputControlGroup(Model, "txtEmail", "Email.Text", "Email", new Dictionary<string, string>() { { "column", "Email" } }, true, inputType: "email")
                    @Html.InputControlGroup(Model, "txtPassword", "Password.Text", "Password", new Dictionary<string, string>() { { "column", "Password" } }, true, inputType: "password")
                    @Html.InputControlGroup(Model, "txtPassword2", "ConfirmPassword.Text", "Confirm Password", new Dictionary<string, string>() { { "validation-matches-match", Model.GetId("txtPassword") }, { "validation-matches-message", string.Format(Model.GetPortalText("MustMatch.Text", "Must match {0} entered above"), "password") } }, false, inputType: "password")
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <a class="btn btn-primary" id="@Model.GetId("btnCreate")">@Model.GetPortalText("Create.Text", "Create")</a>
            <a class="btn" data-dismiss="modal">@Model.GetPortalText("Cancel.Text", "Cancel")</a>
        </div>
    </div>

</div>
