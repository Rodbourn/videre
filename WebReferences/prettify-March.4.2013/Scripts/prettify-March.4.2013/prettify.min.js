// Copyright (C) 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var IN_GLOBAL_SCOPE = true; window["PR_SHOULD_USE_CONTINUATION"] = true; var prettyPrintOne; var prettyPrint; (function() { function A(e, t, n, r) { if (!t) { return } var i = { sourceCode: t, basePos: e }; n(i); r.push.apply(r, i.decorations) } function M(e) { var t = undefined; for (var n = e.firstChild; n; n = n.nextSibling) { var r = n.nodeType; t = r === 1 ? t ? e : n : r === 3 ? O.test(n.nodeValue) ? e : t : t } return t === e ? undefined : t } function _(e, t) { var n = {}; var r; (function() { var i = e.concat(t); var s = []; var o = {}; for (var u = 0, a = i.length; u < a; ++u) { var f = i[u]; var l = f[3]; if (l) { for (var c = l.length; --c >= 0;) { n[l.charAt(c)] = f } } var h = f[1]; var p = "" + h; if (!o.hasOwnProperty(p)) { s.push(h); o[p] = null } } s.push(/[\0-\uffff]/); r = combinePrefixPatterns(s) })(); var i = t.length; var s = function(e) { var o = e.sourceCode, u = e.basePos; var a = [u, S]; var f = 0; var l = o.match(r) || []; var c = {}; for (var h = 0, p = l.length; h < p; ++h) { var d = l[h]; var v = c[d]; var m = void 0; var g; if (typeof v === "string") { g = false } else { var y = n[d.charAt(0)]; if (y) { m = d.match(y[1]); v = y[0] } else { for (var b = 0; b < i; ++b) { y = t[b]; m = d.match(y[1]); if (m) { v = y[0]; break } } if (!m) { v = S } } g = v.length >= 5 && "lang-" === v.substring(0, 5); if (g && !(m && typeof m[1] === "string")) { g = false; v = N } if (!g) { c[d] = v } } var w = f; f += d.length; if (!g) { a.push(u + w, v) } else { var E = m[1]; var x = d.indexOf(E); var T = x + E.length; if (m[2]) { T = d.length - m[2].length; x = T - E.length } var C = v.substring(5); A(u + w, d.substring(0, x), s, a); A(u + w + x, E, j(C, E), a); A(u + w + T, d.substring(T), s, a) } } e.decorations = a }; return s } function D(e) { var t = [], n = []; if (e["tripleQuotedStrings"]) { t.push([m, /^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/, null, "'\""]) } else if (e["multiLineStrings"]) { t.push([m, /^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/, null, "'\"`"]) } else { t.push([m, /^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/, null, "\"'"]) } if (e["verbatimStrings"]) { n.push([m, /^@\"(?:[^\"]|\"\")*(?:\"|$)/, null]) } var r = e["hashComments"]; if (r) { if (e["cStyleComments"]) { if (r > 1) { t.push([y, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, "#"]) } else { t.push([y, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/, null, "#"]) } n.push([m, /^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/, null]) } else { t.push([y, /^#[^\r\n]*/, null, "#"]) } } if (e["cStyleComments"]) { n.push([y, /^\/\/[^\r\n]*/, null]); n.push([y, /^\/\*[\s\S]*?(?:\*\/|$)/, null]) } var i = e["regexLiterals"]; if (i) { var s = i > 1 ? "" : "\n\r"; var o = s ? "." : "[\\S\\s]"; var u = "/(?=[^/*" + s + "])" + "(?:[^/\\x5B\\x5C" + s + "]" + "|\\x5C" + o + "|\\x5B(?:[^\\x5C\\x5D" + s + "]" + "|\\x5C" + o + ")*(?:\\x5D|$))+" + "/"; n.push(["lang-regex", RegExp("^" + REGEXP_PRECEDER_PATTERN + "(" + u + ")")]) } var a = e["types"]; if (a) { n.push([b, a]) } var f = ("" + e["keywords"]).replace(/^ | $/g, ""); if (f.length) { n.push([g, new RegExp("^(?:" + f.replace(/[\s,]+/g, "|") + ")\\b"), null]) } t.push([S, /^\s+/, null, " \r\n	 "]); var l = "^.[^\\s\\w.$@'\"`/\\\\]*"; if (e["regexLiterals"]) { l += "(?!s*/)" } n.push([w, /^@[a-z_$][a-z_$@0-9]*/i, null], [b, /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/, null], [S, /^[a-z_$][a-z_$@0-9]*/i, null], [w, new RegExp("^(?:" + "0x[a-f0-9]+" + "|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)" + "(?:e[+\\-]?\\d+)?" + ")" + "[a-z]*", "i"), null, "0123456789"], [S, /^\\[\s\S]?/, null], [E, new RegExp(l), null]); return _(t, n) } function B(t, n) { for (var r = n.length; --r >= 0;) { var i = n[r]; if (!H.hasOwnProperty(i)) { H[i] = t } else if (e["console"]) { console["warn"]("cannot override language handler %s", i) } } } function j(e, t) { if (!(e && H.hasOwnProperty(e))) { e = /^\s*</.test(t) ? "default-markup" : "default-code" } return H[e] } function F(t) { var n = t.langExtension; try { var r = extractSourceSpans(t.sourceNode, t.pre); var i = r.sourceCode; t.sourceCode = i; t.spans = r.spans; t.basePos = 0; j(n, i)(t); recombineTagsAndDecorations(t) } catch (s) { if (e["console"]) { console["log"](s && s["stack"] || s) } } } function I(e, t, n) { var r = document.createElement("div"); r.innerHTML = "<pre>" + e + "</pre>"; r = r.firstChild; if (n) { numberLines(r, n, true) } var i = { langExtension: t, numberLines: n, sourceNode: r, pre: 1 }; F(i); return r.innerHTML } function q(t, n) { function s(e) { return r.getElementsByTagName(e) } function E() { var n = e["PR_SHOULD_USE_CONTINUATION"] ? c["now"]() + 250 : Infinity; for (; h < u.length && c["now"]() < n; h++) { var r = u[h]; var s = w; { for (var o = r; o = o.previousSibling;) { var a = o.nodeType; var f = (a === 7 || a === 8) && o.nodeValue; if (f ? !/^\??prettify\b/.test(f) : a !== 3 || /\S/.test(o.nodeValue)) { break } if (f) { s = {}; f.replace(/\b(\w+)=([\w:.%+-]+)/g, function(e, t, n) { s[t] = n }); break } } } var l = r.className; if ((s !== w || v.test(l)) && !m.test(l)) { var S = false; for (var x = r.parentNode; x; x = x.parentNode) { var T = x.tagName; if (b.test(T) && x.className && v.test(x.className)) { S = true; break } } if (!S) { r.className += " prettyprinted"; var N = s["lang"]; if (!N) { N = l.match(d); var C; if (!N && (C = M(r)) && y.test(C.tagName)) { N = C.className.match(d) } if (N) { N = N[1] } } var k; if (g.test(r.tagName)) { k = 1 } else { var L = r["currentStyle"]; var A = i.defaultView; var O = L ? L["whiteSpace"] : A && A.getComputedStyle ? A.getComputedStyle(r, null).getPropertyValue("white-space") : 0; k = O && "pre" === O.substring(0, 3) } var _ = s["linenums"]; if (!(_ = _ === "true" || +_)) { _ = l.match(/\blinenums\b(?::(\d+))?/); _ = _ ? _[1] && _[1].length ? +_[1] : true : false } if (_) { numberLines(r, _, k) } p = { langExtension: N, sourceNode: r, numberLines: _, pre: k }; F(p) } } } if (h < u.length) { setTimeout(E, 250) } else if ("function" === typeof t) { t() } } var r = n || document.body; var i = r.ownerDocument || document; var o = [s("pre"), s("code"), s("xmp")]; var u = []; for (var a = 0; a < o.length; ++a) { for (var f = 0, l = o[a].length; f < l; ++f) { u.push(o[a][f]) } } o = null; var c = Date; if (!c["now"]) { c = { now: function() { return +(new Date) } } } var h = 0; var p; var d = /\blang(?:uage)?-([\w.]+)(?!\S)/; var v = /\bprettyprint\b/; var m = /\bprettyprinted\b/; var g = /pre|xmp/i; var y = /^code$/i; var b = /^(?:pre|code|xmp)$/i; var w = {}; E() } var e = window; var t = ["break,continue,do,else,for,if,return,while"]; var n = [t, "auto,case,char,const,default," + "double,enum,extern,float,goto,inline,int,long,register,short,signed," + "sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"]; var r = [n, "catch,class,delete,false,import," + "new,operator,private,protected,public,this,throw,true,try,typeof"]; var i = [r, "alignof,align_union,asm,axiom,bool," + "concept,concept_map,const_cast,constexpr,decltype,delegate," + "dynamic_cast,explicit,export,friend,generic,late_check," + "mutable,namespace,nullptr,property,reinterpret_cast,static_assert," + "static_cast,template,typeid,typename,using,virtual,where"]; var s = [r, "abstract,assert,boolean,byte,extends,final,finally,implements,import," + "instanceof,interface,null,native,package,strictfp,super,synchronized," + "throws,transient"]; var o = [s, "as,base,by,checked,decimal,delegate,descending,dynamic,event," + "fixed,foreach,from,group,implicit,in,internal,into,is,let," + "lock,object,out,override,orderby,params,partial,readonly,ref,sbyte," + "sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort," + "var,virtual,where"]; var u = "all,and,by,catch,class,else,extends,false,finally," + "for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then," + "throw,true,try,unless,until,when,while,yes"; var a = [r, "debugger,eval,export,function,get,null,set,undefined,var,with," + "Infinity,NaN"]; var f = "caller,delete,die,do,dump,elsif,eval,exit,foreach,for," + "goto,if,import,last,local,my,next,no,our,print,package,redo,require," + "sub,undef,unless,until,use,wantarray,while,BEGIN,END"; var l = [t, "and,as,assert,class,def,del," + "elif,except,exec,finally,from,global,import,in,is,lambda," + "nonlocal,not,or,pass,print,raise,try,with,yield," + "False,True,None"]; var c = [t, "alias,and,begin,case,class," + "def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo," + "rescue,retry,self,super,then,true,undef,unless,until,when,yield," + "BEGIN,END"]; var h = [t, "as,assert,const,copy,drop," + "enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv," + "pub,pure,ref,self,static,struct,true,trait,type,unsafe,use"]; var p = [t, "case,done,elif,esac,eval,fi," + "function,in,local,set,then,until"]; var d = [i, o, a, f, l, c, p]; var v = /^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/; var m = "str"; var g = "kwd"; var y = "com"; var b = "typ"; var w = "lit"; var E = "pun"; var S = "pln"; var x = "tag"; var T = "dec"; var N = "src"; var C = "atn"; var k = "atv"; var L = "nocode"; include("regexpPrecederPatterns.pl"); include("combinePrefixPatterns.js"); include("extractSourceSpans.js"); var O = /\S/; var P = D({ keywords: d, hashComments: true, cStyleComments: true, multiLineStrings: true, regexLiterals: true }); include("numberLines.js"); include("recombineTagsAndDecorations.js"); var H = {}; B(P, ["default-code"]); B(_([], [[S, /^[^<?]+/], [T, /^<!\w[^>]*(?:>|$)/], [y, /^<\!--[\s\S]*?(?:-\->|$)/], ["lang-", /^<\?([\s\S]+?)(?:\?>|$)/], ["lang-", /^<%([\s\S]+?)(?:%>|$)/], [E, /^(?:<[%?]|[%?]>)/], ["lang-", /^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i], ["lang-js", /^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i], ["lang-css", /^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i], ["lang-in.tag", /^(<\/?[a-z][^<>]*>)/i]]), ["default-markup", "htm", "html", "mxml", "xhtml", "xml", "xsl"]); B(_([[S, /^[\s]+/, null, " 	\r\n"], [k, /^(?:\"[^\"]*\"?|\'[^\']*\'?)/, null, "\"'"]], [[x, /^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i], [C, /^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i], ["lang-uq.val", /^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/], [E, /^[=<>\/]+/], ["lang-js", /^on\w+\s*=\s*\"([^\"]+)\"/i], ["lang-js", /^on\w+\s*=\s*\'([^\']+)\'/i], ["lang-js", /^on\w+\s*=\s*([^\"\'>\s]+)/i], ["lang-css", /^style\s*=\s*\"([^\"]+)\"/i], ["lang-css", /^style\s*=\s*\'([^\']+)\'/i], ["lang-css", /^style\s*=\s*([^\"\'>\s]+)/i]]), ["in.tag"]); B(_([], [[k, /^[\s\S]+/]]), ["uq.val"]); B(D({ keywords: i, hashComments: true, cStyleComments: true, types: v }), ["c", "cc", "cpp", "cxx", "cyc", "m"]); B(D({ keywords: "null,true,false" }), ["json"]); B(D({ keywords: o, hashComments: true, cStyleComments: true, verbatimStrings: true, types: v }), ["cs"]); B(D({ keywords: s, cStyleComments: true }), ["java"]); B(D({ keywords: p, hashComments: true, multiLineStrings: true }), ["bash", "bsh", "csh", "sh"]); B(D({ keywords: l, hashComments: true, multiLineStrings: true, tripleQuotedStrings: true }), ["cv", "py", "python"]); B(D({ keywords: f, hashComments: true, multiLineStrings: true, regexLiterals: 2 }), ["perl", "pl", "pm"]); B(D({ keywords: c, hashComments: true, multiLineStrings: true, regexLiterals: true }), ["rb", "ruby"]); B(D({ keywords: a, cStyleComments: true, regexLiterals: true }), ["javascript", "js"]); B(D({ keywords: u, hashComments: 3, cStyleComments: true, multilineStrings: true, tripleQuotedStrings: true, regexLiterals: true }), ["coffee"]); B(D({ keywords: h, cStyleComments: true, multilineStrings: true }), ["rc", "rs", "rust"]); B(_([], [[m, /^[\s\S]+/]]), ["regex"]); var R = e["PR"] = { createSimpleLexer: _, registerLangHandler: B, sourceDecorator: D, PR_ATTRIB_NAME: C, PR_ATTRIB_VALUE: k, PR_COMMENT: y, PR_DECLARATION: T, PR_KEYWORD: g, PR_LITERAL: w, PR_NOCODE: L, PR_PLAIN: S, PR_PUNCTUATION: E, PR_SOURCE: N, PR_STRING: m, PR_TAG: x, PR_TYPE: b, prettyPrintOne: IN_GLOBAL_SCOPE ? e["prettyPrintOne"] = I : prettyPrintOne = I, prettyPrint: prettyPrint = IN_GLOBAL_SCOPE ? e["prettyPrint"] = q : prettyPrint = q }; if (typeof define === "function" && define["amd"]) { define("google-code-prettify", [], function() { return R }) } })()